/*
Given a string, return the character that appears the minimum number of times in the string. The string will contain only ASCII characters, from the ranges        ( “a” – “z”, “A” – “Z”, 0 – 9 ), and case matters. If there is a tie in the minimum number of times a character appears in the string return the character that appears first in the string.
Input Format:
Single line with no space denoting the input string.
Output Format:
Single character denoting the least frequent character.
Constraints:
Length of string <=10^6
Sample Input / Output
Sample Input: cdadcda
Sample Output: c
Explanation: C and A both are with minimum frequency. So c is the answer because it comes first with less index.
*/
import java.util.*;

class cse {
    public static void main(String arg[]) {
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        HashMap<Character, Integer> map = new HashMap<>();

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            map.put(ch, map.getOrDefault(ch, 0) + 1);
        }
        int min = Integer.MAX_VALUE;
        for (int val : map.values()) {
            if (val < min) {
                min = val;
            }
        }

        for (int i = 0; i < str.length(); i++) {
            if (map.get(str.charAt(i)) == min) {
                System.out.println(str.charAt(i));
                return;
            }
        }

        System.out.println("All same value");
    }
}
